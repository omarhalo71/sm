const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const app = express();
app.use(express.json());
const server = http.createServer(app); // โ ูุฐุง ุงูุณุทุฑ ููู!
const io = new Server(server, {
  cors: {
    origin: "*"
  }
});

// ุจููุฉ ููุฏ socket.io



// โ ุดุบูู ุงูุณูุฑูุฑ ุนูู ุงูุดุจูุฉ ูููุง:
server.listen(5000, "0.0.0.0", () => {
  console.log("๐ ุงูุณูุฑูุฑ ุดุบุงู ุนูู http://0.0.0.0:5000");
});


let users = {}; // ูุงุฆูุฉ ุงููุณุชุฎุฏููู ุงููุชุตููู
let activeCalls = {}; // ูุงุฆูุฉ ุงูููุงููุงุช ุงููุดุทุฉ


io.on("connection", socket => {
  const axios = require("axios");

socket.on("saveCallLog", ({ from, to, duration, type }) => {
    const minutes = String(Math.floor(duration / 60)).padStart(2, "0");
    const seconds = String(duration % 60).padStart(2, "0");
    const formatted = `${minutes}:${seconds}`;
    const msg = `๐ ุชูุช ููุงููุฉ ${type === "video" ? "ููุฏูู" : "ุตูุชูุฉ"} ูุฏุชูุง ${formatted}`;

    axios.post("https://halostl.com/social_media/send_call_message.php", {

        from,
        to,
        message: msg
    }).then(() => {
        console.log("โ ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูููุงููุฉ ุฅูู ุงููุณุชุฎุฏู", to);
    }).catch(err => {
        console.error("๐จ ูุดู ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูููุงููุฉ:", err.message);
    });
});

    console.log("๐ข ูุณุชุฎุฏู ูุชุตู:", socket.id);

    // โ ุชุณุฌูู ุงููุณุชุฎุฏู ุนูุฏ ุงูุงุชุตุงู
    socket.on("registerUser", userID => {
    users[userID] = socket.id;
    console.log(`๐ ุงููุณุชุฎุฏู ${userID} ุชู ุชุณุฌููู. ุงููุชุตููู ุญุงูููุง:`, users);
    io.emit("userStatusUpdate", { userId: userID, status: "online" });
});

    
    socket.on("disconnect", () => {
      console.log("๐ด ุงููุณุชุฎุฏู ูุทุน ุงูุงุชุตุงู:", socket.id);
    
      Object.keys(users).forEach(userID => {
        if (users[userID] === socket.id) {
          console.log(`๐ช ุฎุฑูุฌ ุงููุณุชุฎุฏู ${userID}`);
          delete users[userID];
    io.emit("userStatusUpdate", { userId: userID, status: "offline" });
          // ุฅุฐุง ูุงู ูู ููุงููุฉุ ุจูุบ ุงูุทุฑู ุงูุซุงูู
          if (activeCalls[userID]) {
            const otherUser = activeCalls[userID];
            if (users[otherUser]) {
              io.to(users[otherUser]).emit("endCall");
            }
            delete activeCalls[otherUser];
            delete activeCalls[userID];
          }
        }
      });
    });
    
    
    

    // โ ุฅุฑุณุงู ุทูุจ ุงุชุตุงู
    socket.on("callUser", ({ userToCall, from, signal }) => {
      console.log(`๐ ุงููุณุชุฎุฏู ${from} ูุชุตู ุจู ${userToCall}`);
      if (users[userToCall]) {
        io.to(users[userToCall]).emit("incomingCall", { from, signal });
    
        // ๐ข ุชุณุฌูู ุงูููุงููุฉ ุงููุดุทุฉ
        activeCalls[from] = userToCall;
        activeCalls[userToCall] = from;
      }
    });
    
    

    // โ ุงูุฑุฏ ุนูู ุงูุงุชุตุงู
    socket.on("answerCall", ({ to, signal }) => {
        if (users[to]) {
            console.log(`โ ุงููุณุชุฎุฏู ${to} ูุจู ุงูููุงููุฉ ูุน ${activeCalls[to]}`);
            io.to(users[to]).emit("callAccepted", { signal });
        }
    });

    // โ ุชูุฑูุฑ `ICE Candidates`
    socket.on("iceCandidate", ({ to, candidate }) => {
        if (users[to]) {
            console.log(`๐ง ุชูุฑูุฑ ICE Candidate ุฅูู ${to}:`, candidate);
            io.to(users[to]).emit("iceCandidate", { candidate });
        }
    });
    
    

    // โ ุฅููุงุก ุงูููุงููุฉ
    socket.on("endCall", ({ from, to }) => {
        console.log(`๐ด ุฅููุงุก ุงูููุงููุฉ ุจูู ${from} ู ${to}`);
    
        // ุฅููุงุก ุงูููุงููุฉ ุนูุฏ ุงูุทุฑููู
        if (users[to]) io.to(users[to]).emit("endCall");
        if (users[from]) io.to(users[from]).emit("endCall");
    
        delete activeCalls[from];
        delete activeCalls[to];
    });
    

    // โ ุฑูุถ ุงูููุงููุฉ
    socket.on("rejectCall", ({ to }) => {
        if (users[to]) {
            console.log(`โ ุงููุณุชุฎุฏู ${to} ุฑูุถ ุงูููุงููุฉ.`);
            io.to(users[to]).emit("callRejected");
        }
    });

    // โ ุชุณุฌูู ุฎุฑูุฌ ุงููุณุชุฎุฏู ุนูุฏ ูุทุน ุงูุงุชุตุงู
    
});
